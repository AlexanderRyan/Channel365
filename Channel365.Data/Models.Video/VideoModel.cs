using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Text.Json.Serialization;
using Channel365.Data.Entities;
using Channel365.Data.Models.Video;
using Microsoft.AspNetCore.Http;

namespace Channel365.Models {
    public class VideoModel {

        public VideoModel()
        {
            //  this is used for setting a time on WHEN the video was uploaded
            CreatedDate = DateTime.Now;
        }

        [Key]
        public Guid VideoId { get; set; }
        public string VideoTitle { get; set; }
        public string VideoDescription { get; set; }
        public virtual ICollection<CommentVideoModel> CommentVideos { get; set; } = new List<CommentVideoModel>();

        [JsonIgnore] // Alex : Added this to avoid infinite serialization loop caused by jQuery AJAX call
                     // from the Search-function. No time to to flatten with ViewModels
        public virtual IList<VideosInPlaylist> VideosInPlaylists { get; set; } = new List<VideosInPlaylist>();

        //  navigation prop
        public string Id { get; set; }      //  <=  do NOT remove this
        public ApplicationUser ApplicationUser { get; set; }

        //  the url is supposed to be generated by a base64 generator; but we'll see if the GUID IDs works for now (perfomance pov)
        public string UrlSlug { get; set; }
        public string VideoImage { get; set; }
        public string VideoPath { get; set; }
        public ICollection<LikeDislikeModel> LikesAndDislikes { get; set; } = new List<LikeDislikeModel>();
        public DateTime CreatedDate { get; set; }
        public DateTime? UpdatedDate { get; set; }

        [NotMapped,
            AllowedExtensions(new string[] { ".avi", ".mp4", ".mkv", ".mov", ".ogg", ".webm", ".webvtt" })]
        public IFormFile File { get; set; }

        //  If TRUE (1) then the video is PRIVATE => if FALSE (0) then the video is PUBLIC
        public bool IsPrivate { get; set; }

    }
}